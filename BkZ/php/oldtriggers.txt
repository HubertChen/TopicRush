create or replace function getgradeletter(inputscore in integer) return char is finalgrade char;
begin
     if (inputscore >= 90) and (inputscore <= 100) then finalgrade := 'A';end if;
     if (inputscore >= 80) and (inputscore < 90) then finalgrade := 'B'; end if;
     if (inputscore >= 70) and (inputscore < 80) then finalgrade := 'C'; end if;
     if (inputscore >= 60) and (inputscore < 70) then finalgrade := 'D'; end if;
     if (inputscore >= 0) and (inputscore < 60) then finalgrade := 'F';  end if;
     return finalgrade;
end getgradeletter;
/

create or replace function getgradevalue(gradeletter in char) return integer is gradevalue integer;
begin
     gradevalue := 0;
     if (gradeletter = 'A') then gradevalue := 4; end if;
     if (gradeletter = 'B') then gradevalue := 3; end if;
     if (gradeletter = 'C') then gradevalue := 2; end if;
     if (gradeletter = 'D') then gradevalue := 1; end if;
     return gradevalue;
end getgradevalue;
/

create or replace trigger student_trigger
     after insert on student
for each row
declare
     fname varchar2(20);
     mname varchar2(20);
     lname varchar2(20);
begin
     select firstname,middlename,lastname into fname,mname,lname from account where (accountid=:new.accountid);
     insert into student_audit values(student_id_seq.nextval,:new.accountid,fname,mname,lname,sysdate,user);
end;
/

create or replace trigger enroll_cost_trigger
    after insert or update of courseid on enroll
for each row
declare
     coursecost integer;
     newbalance integer;
     oldcoursecount integer;
begin
     select balance into newbalance from registration where studentaccountid=:new.studentaccountid;
     select cost into coursecost from course where course.courseid=:new.courseid;
     update registration set balance=newbalance+coursecost where studentaccountid=:new.studentaccountid;
     select totalcourses into oldcoursecount from student where accountid=:new.studentaccountid;
     update student set totalcourses=(oldcoursecount+1) where accountid=:new.studentaccountid;
end;
/

create or replace trigger enroll_grade_trigger
    before insert or update of specifiedscore on enroll
for each row
declare
     newgpapoints integer;
     oldtotalgpapoints integer;
     newtotalgpapoints integer;
     totalstudentcourses integer;
     newgpa decimal(5,2);
     oldgradevalue integer;
begin
     select totalgpapoints,totalcourses into oldtotalgpapoints,totalstudentcourses from student where accountid=:new.studentaccountid;
     :new.finalgrade := getgradeletter(:new.specifiedscore);
     newgpapoints := getgradevalue(:new.finalgrade);
     if  inserting then
          totalstudentcourses := totalstudentcourses + 1;
          newtotalgpapoints := oldtotalgpapoints + newgpapoints;
     end if;
     if updating then
          oldgradevalue := getgradevalue(:old.finalgrade);
          if (oldgradevalue != newgpapoints) then
               newtotalgpapoints := oldtotalgpapoints + newgpapoints - oldgradevalue;
          end if;
     end if;
     newgpa :=newtotalgpapoints / totalstudentcourses;
     update student set totalgpapoints=newtotalgpapoints,gpa=newgpa where accountid=:new.studentaccountid;
end;
/

create or replace trigger enroll_delete
   after delete on enroll
for each row
declare
     oldgradevalue integer;
     oldtotalgpapoints integer;
     totalstudentcourses integer;
     newtotalgpapoints integer;
     newgpa decimal(5,2);
begin
     select totalgpapoints,totalcourses into oldtotalgpapoints,totalstudentcourses from student where accountid=:old.studentaccountid;
     oldgradevalue := getgradevalue(:old.finalgrade);
     newtotalgpapoints := oldtotalgpapoints - oldgradevalue;
     totalstudentcourses := totalstudentcourses - 1;
     if (totalstudentcourses > 0) then
          newgpa :=newtotalgpapoints / totalstudentcourses;
     else
          newgpa := 0;
     end if;
     update student set totalgpapoints=newtotalgpapoints,gpa=newgpa,totalcourses=totalstudentcourses where accountid=:old.studentaccountid;
end;
/


create or replace trigger payment_trigger
    after insert or update on payment
for each row
declare
     studentid integer;
     oldbalance integer;
     newbalance integer;
     oldcredit integer;
     newcredit integer;
begin
     newcredit := 0;
     newbalance := 0;
     select studentaccountid into studentid from registration where registration.regid=:new.regid;
     select balance,credit into oldbalance,oldcredit from registration where studentaccountid=studentid;
     newbalance := oldbalance-:new.total;
     if (newbalance < 0) then
          newcredit := oldcredit + (newbalance*-1);
          newbalance := 0;
     end if;
     update registration
     set balance=newbalance,credit=newcredit
     where studentaccountid=studentid;

     insert into payment_audit values(payment_id_seq.nextval,:new.paydate,:new.total,oldbalance,oldcredit,newbalance,newcredit);

end;
/
